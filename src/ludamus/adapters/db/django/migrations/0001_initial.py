# Generated by Django 5.2.2 on 2025-06-13 20:16

import django.contrib.auth.models
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("sites", "0002_alter_domain_unique"),
    ]

    operations = [
        migrations.CreateModel(
            name="Festival",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField()),
                ("description", models.TextField(blank=True, default="")),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("publication_time", models.DateTimeField(blank=True, null=True)),
                ("proposal_start_time", models.DateTimeField(blank=True, null=True)),
                ("proposal_end_time", models.DateTimeField(blank=True, null=True)),
                ("enrollment_start_time", models.DateTimeField(blank=True, null=True)),
                ("enrollment_end_time", models.DateTimeField(blank=True, null=True)),
            ],
            options={"db_table": "festival"},
        ),
        migrations.CreateModel(
            name="Guild",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField()),
                ("description", models.TextField(blank=True, default="")),
                ("creation_time", models.DateTimeField(auto_now_add=True)),
                ("modification_time", models.DateTimeField(auto_now=True)),
                ("is_public", models.BooleanField(default=True)),
            ],
            options={"db_table": "guild"},
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={"db_table": "tag"},
        ),
        migrations.CreateModel(
            name="TagCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={"db_table": "tag_category"},
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="Name"),
                ),
                ("slug", models.SlugField(unique=True)),
                (
                    "user_type",
                    models.CharField(
                        choices=[("active", "Active"), ("connected", "Connected")],
                        default="active",
                        max_length=255,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="connected",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "user",
            },
            managers=[("objects", django.contrib.auth.models.UserManager())],
        ),
        migrations.CreateModel(
            name="GuildMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "membership_type",
                    models.CharField(
                        choices=[
                            ("applied", "APPLIED"),
                            ("member", "MEMBER"),
                            ("admin", "ADMIN"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "guild",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guild_members",
                        to="db_main.guild",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guild_members",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"db_table": "guild_member"},
        ),
        migrations.AddField(
            model_name="guild",
            name="members",
            field=models.ManyToManyField(
                through="db_main.GuildMember", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField()),
                ("creation_time", models.DateTimeField(auto_now_add=True)),
                ("modification_time", models.DateTimeField(auto_now=True)),
                (
                    "festival",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rooms",
                        to="db_main.festival",
                    ),
                ),
            ],
            options={"db_table": "room"},
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("slug", models.SlugField()),
                ("description", models.TextField(blank=True, default="")),
                ("requirements", models.TextField(blank=True)),
                ("creation_time", models.DateTimeField(auto_now_add=True)),
                ("modification_time", models.DateTimeField(auto_now=True)),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("publication_time", models.DateTimeField(blank=True, null=True)),
                ("participants_limit", models.PositiveIntegerField()),
                (
                    "guild",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="db_main.guild",
                    ),
                ),
                (
                    "host",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hosted_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"db_table": "session"},
        ),
        migrations.CreateModel(
            name="AgendaItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_confirmed", models.BooleanField(default=False)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agenda_items",
                        to="db_main.room",
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agenda_item",
                        to="db_main.session",
                    ),
                ),
            ],
            options={"db_table": "agenda_item"},
        ),
        migrations.CreateModel(
            name="SessionParticipation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("creation_time", models.DateTimeField(auto_now_add=True)),
                ("modification_time", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("confirmed", "CONFIRMED"), ("waiting", "WAITING")],
                        max_length=15,
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_participations",
                        to="db_main.session",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_participations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"db_table": "session_participant"},
        ),
        migrations.AddField(
            model_name="session",
            name="participants",
            field=models.ManyToManyField(
                through="db_main.SessionParticipation", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="Sphere",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("managers", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                (
                    "site",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sphere",
                        to="sites.site",
                    ),
                ),
            ],
            options={"db_table": "sphere"},
        ),
        migrations.AddField(
            model_name="session",
            name="sphere",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sessions",
                to="db_main.sphere",
            ),
        ),
        migrations.AddField(
            model_name="festival",
            name="sphere",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="festivals",
                to="db_main.sphere",
            ),
        ),
        migrations.AddField(
            model_name="session",
            name="tags",
            field=models.ManyToManyField(blank=True, to="db_main.tag"),
        ),
        migrations.AddField(
            model_name="tag",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tags",
                to="db_main.tagcategory",
            ),
        ),
        migrations.CreateModel(
            name="TimeSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("end_time", models.DateTimeField()),
                ("start_time", models.DateTimeField()),
                (
                    "festival",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_slots",
                        to="db_main.festival",
                    ),
                ),
            ],
            options={"db_table": "time_slot"},
        ),
        migrations.CreateModel(
            name="WaitList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField()),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "festival",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wait_lists",
                        to="db_main.festival",
                    ),
                ),
                ("tag_categories", models.ManyToManyField(to="db_main.tagcategory")),
            ],
            options={"db_table": "wait_list"},
        ),
        migrations.CreateModel(
            name="Proposal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, default="")),
                ("requirements", models.TextField(blank=True)),
                ("needs", models.TextField(blank=True, default="")),
                ("participants_limit", models.PositiveIntegerField()),
                ("creation_time", models.DateTimeField(auto_now_add=True)),
                (
                    "host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposal",
                        to="db_main.session",
                    ),
                ),
                ("tags", models.ManyToManyField(blank=True, to="db_main.tag")),
                ("time_slots", models.ManyToManyField(to="db_main.timeslot")),
                (
                    "waitlist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposals",
                        to="db_main.waitlist",
                    ),
                ),
            ],
            options={"db_table": "proposal"},
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                models.OrderBy(
                    django.db.models.functions.text.Lower("email"), descending=True
                ),
                condition=models.Q(("email", ""), _negated=True),
                name="constraint_unique_email_lower_no_null",
            ),
        ),
        migrations.AddConstraint(
            model_name="guildmember",
            constraint=models.UniqueConstraint(
                fields=("guild", "user"), name="guildmember_unique_guild_and_user"
            ),
        ),
        migrations.AddConstraint(
            model_name="guild",
            constraint=models.UniqueConstraint(
                fields=("slug",), name="guild_unique_slug"
            ),
        ),
        migrations.AddConstraint(
            model_name="room",
            constraint=models.UniqueConstraint(
                fields=("slug", "festival"), name="room_has_unique_slug_and_festival"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="sessionparticipation", unique_together={("session", "user")}
        ),
        migrations.AddConstraint(
            model_name="festival",
            constraint=models.UniqueConstraint(
                fields=("sphere", "slug"), name="festival_has_unique_slug_and_sphere"
            ),
        ),
        migrations.AddConstraint(
            model_name="festival",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("end_time__isnull", True),
                        ("publication_time__isnull", True),
                        ("start_time__isnull", True),
                    ),
                    models.Q(
                        ("publication_time__lte", models.F("start_time")),
                        ("start_time__lt", models.F("end_time")),
                    ),
                    _connector="OR",
                ),
                name="festival_date_times",
            ),
        ),
        migrations.AddConstraint(
            model_name="session",
            constraint=models.UniqueConstraint(
                fields=("slug", "sphere"), name="session_unique_slug_in_sphere"
            ),
        ),
        migrations.AddConstraint(
            model_name="session",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("publication_time__isnull", True),
                        ("start_time__isnull", True),
                        ("publication_time__lte", models.F("start_time")),
                        _connector="OR",
                    ),
                    models.Q(
                        ("start_time__isnull", True),
                        ("end_time__isnull", True),
                        ("start_time__lt", models.F("end_time")),
                        _connector="OR",
                    ),
                ),
                name="session_date_times",
            ),
        ),
        migrations.AddConstraint(
            model_name="timeslot",
            constraint=models.UniqueConstraint(
                fields=("festival", "start_time", "end_time"),
                name="timeslot_has_unique_times_for_festival",
            ),
        ),
        migrations.AddConstraint(
            model_name="timeslot",
            constraint=models.CheckConstraint(
                condition=models.Q(("start_time__lt", models.F("end_time"))),
                name="timeslot_date_times",
            ),
        ),
        migrations.AddConstraint(
            model_name="waitlist",
            constraint=models.UniqueConstraint(
                fields=("slug", "festival"),
                name="waitlist_has_unique_slug_and_festival",
            ),
        ),
    ]

[project]
name = "ludamus"
version = "0.1.0"
description = "Event management website"
authors = [
    { name = "RadosÅ‚aw Ganczarek", email = "radoslaw@ganczarek.in" },
    { name = "hasparus", email = "hasparus@gmail.com" },
    { name = "lprasol", email = "lprasol@gmail.com" },
]
license = { text = "BSD-3-Clause license" }
readme = "README.md"
requires-python = ">=3.13.0,<3.14"
dynamic = ['dependencies']

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
authlib = "~1.6.0"
django = "~5.2.2"
django-bootstrap5 = "~25.1.0"
django-bootstrap-icons = "~0.9.0"
gunicorn = "^23.0.0"
django-environ = "^0.12.0"
psycopg = "^3.2.9"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
django-debug-toolbar = "^5.2.0"
django-stubs = "^5.2.0"
djlint = "^1.36.4"
faker = "^37.4.0"
mypy = "^1.16.0"
poethepoet = "^0.36.0"
pylint = "^3.3.7"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-django = "^4.11.1"
ruff = "^0.12.0"
types-authlib = "^1.5.0.20250516"
factory-boy = "^3.3.3"
freezegun = "^1.5.2"

# POE

[tool.poe]
envfile = ".env.dev"

[tool.poe.env]
PYTHONPATH = "src"
DJANGO_SETTINGS_MODULE = "ludamus.config.settings"

[tool.poe.tasks]
black = "black ."
ruff = "ruff check ."
ruff-fix = "ruff check --fix  ."
pylint = "pylint ."
mypy = "mypy ."
djlint = "djlint . --lint"
djlint-format = "djlint . --reformat --format-css --format-js"
check = ["black", "ruff-fix", "djlint-format", "djlint", "mypy", "pylint"]
dj = "django-admin"
start = "django-admin runserver ludamus.local:8000"
update = [
    { cmd = "pip install -U pip" },
    { cmd = "pip install -U poetry" },
    { cmd = "poetry update" },
    { cmd = "poetry show -o" },
]

[tool.poe.tasks.inttest]
cmd = "pytest"
envfile = ".testenv"

# BLACK

[tool.black]
line-length = 88
preview = true
skip-magic-trailing-comma = true
target-version = ['py313']

# RUFF

[tool.ruff]
fix = false
line-length = 88
output-format = 'concise'
preview = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "COM",
    "CPY",
    "D",
    "PLR0911",
]

[tool.ruff.lint.per-file-ignores]
"*/migrations/**.py" = ["ANN", "ARG001", "E501", "RUF012"]
"tests/**.py" = [
    "ANN",     # flake8-annotations
    "PLR0913", # too-many-arguments
    "PLR0917", # too-many-positional-arguments
    "S101",    # assert
]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

# MYPY

[tool.mypy]
check_untyped_defs = true
color_output = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_expr = false
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = ["migrations/.*.py", "tests/.*.py"]
python_version = "3.13"
plugins = ["mypy_django_plugin.main"]
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.django-stubs]
django_settings_module = "ludamus.config.settings"

[[tool.mypy.overrides]]
module = ["debug_toolbar.toolbar"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["environ"]
ignore_missing_imports = true

# COVERAGE

[tool.coverage.run]
branch = true
source = ["src", "tests"]
omit = ["src/ludamus/config/*", "src/ludamus/deploy/*"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_also = ["if TYPE_CHECKING:", "# pragma: no cover"]

# PYTEST

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "ludamus.config.settings"
